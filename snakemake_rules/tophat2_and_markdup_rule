rule tophat2_and_markdup:
    input:
        r1="{output_path}/{sample}/{sample}.R1.fastq.gz",
        r2="{output_path}/{sample}/{sample}.R2.fastq.gz"
    output:
        r1="{output_path}/{sample}/",
        r2="{output_path}/{sample}/{sample}.mapped.markdup.bam",
        r3="{output_path}/{sample}/{sample}.unmapped.bam",
        r4="{output_path}/{sample}/{sample}.deletions.bed",
        r5="{output_path}/{sample}/{sample}.insertions.bed",
        r6="{output_path}/{sample}//{sample}.junctions.bed"
    log:
        "{output_path}/{sample}/logs/{sample}_tophat2.log"
    params:
        tophat2_path=config["tophat2"]["TOPHAT2_BIN_DIR"],
        samtools_path=config["samtools"]["SAMTOOLS_BIN_DIR"],
        sample=lambda wildcards: config["samples"][wildcards.sample],
        rg_library=config["tophat2"]["RG_LIBRARY"],
        gtf_file=config["tophat2"]["GTF_FILE"],
        mm_rna=config["tophat2"]["MM_RNA"],
        insertsize=config["tophat2"]["INSERTSIZE"],
        ecart_type=config["tophat2"]["ECART_TYPE"],
        rna_library_type=config["tophat2"]["RNA_LIBRARY_TYPE"],
        g_option=config["tophat2"]["G_OPTION"],
        output_path=config["general_path"]["OUTPUT_PATH"],
        bowtie2_reference_root=config["tophat2"]["BOWTIE2_REFERENCE_ROOT"]
    run:
        if params.gtf_file != "":
             shell("{params.tophat2_path}tophat2 --rg-id {params.sample} --rg-sample {params.sample} --rg-library {params.rg_library} --rg-platform {params.rg_library} --rg-platform-unit {params.sample} --keep-fasta-order -G {params.gtf_file} -N {params.mm_rna} --read-edit-dist {params.mm_rna} -r {params.insertsize} --mate-std-dev {params.ecart_type} --no-coverage-search -x 1 -M -p 12 --library-type {params.rna_library_type} -g {params.g_option} -o {output.r1} {params.bowtie2_reference_root} {input.r1} {input.r2} 2> {log}")
        else:
             shell("{params.tophat2_path}tophat2 --rg-id {params.sample} --rg-sample {params.sample} --rg-library {params.rg_library} --rg-platform {params.rg_library} --rg-platform-unit {params.sample} --keep-fasta-order -N {params.mm_rna} --read-edit-dist {params.mm_rna} -r {params.insertsize} --mate-std-dev {params.ecart_type} --no-coverage-search -p 12 --library-type {params.rna_library_type} -g {params.g_option} -o {output.r1} {params.bowtie2_reference_root} {input.r1} {input.r2} 2> {log}")
        shell("mv {output.r1}/accepted_hits.bam {output.r2}")
        shell("mv {output.r1}/unmapped.bam {output.r3}")
        shell("mv {output.r1}/deletions.bed {output.r4}")
        shell("mv {output.r1}/insertions.bed {output.r5}")
        shell("mv {output.r1}/junctions.bed {output.r6}")
        shell("rm {output.r1}/prep_reads.info")
        if params.g_option != "1":
            shell("{params.samtools_path}samtools view -H {output.r2} > {output.r1}{params.sample}.header.txt")
            shell("{params.samtools_path}samtools view {output.r2} | grep \"NH:i:1\" > {output.r1}{params.sample}.unique.sam")
            shell("cat {output.r1}{params.sample}.header.txt {output.r1}{params.sample}.unique.sam > {output.r1}{params.sample}.unique.header.sam")
            shell("{params.samtools_path}samtools view -b -S -o {output.r1}{params.sample}.mapped.unique.bam {output.r1}{params.sample}.unique.header.sam")
            shell("{params.samtools_path}samtools index {output.r1}{params.sample}.mapped.unique.bam")
            shell("rm {output.r1}{params.sample}.unique.sam {output.r1}{params.sample}.header.txt {output.r1}{params.sample}.unique.header.sam")


