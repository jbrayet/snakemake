
from snakemake.utils import report
from urllib.request import pathname2url

configfile: "/bioinfo/users/jbrayet/Bureau/snakemake/pipeline_rna/config.yaml"

include: "../python_lib/util.py"

#include: "../snakemake_rules/trimGalore_rule"
#include: "../snakemake_rules/fastqc_rule"

if config["aligment"]["TOOL"] == "TOPHAT2":
    include: "../snakemake_rules/samtools_merge_rule"
    include: "../snakemake_rules/tophat2_rule"

if config["aligment"]["TOOL"] == "STAR":
    include: "../snakemake_rules/star_indexes_rule"
    include: "../snakemake_rules/star_rule"
    include: "../snakemake_rules/samtools_sort_rule"

include: "../snakemake_rules/picard_markdup_rule"
include: "../snakemake_rules/cuffquant_rule"
include: "../snakemake_rules/cuffnorm_rule"
include: "../snakemake_rules/fastqc_rule"
include: "../snakemake_rules/samtools_index_rule"
include: "../snakemake_rules/samtools_flagstat_rule"
include: "../snakemake_rules/htseq_rule"
include: "../snakemake_rules/gatk_rule"
include: "../snakemake_rules/reformat_coverage_rule"
include: "../snakemake_rules/curie_report_rule"
include: "../snakemake_rules/graph_rule"

workdir: config["general_path"]["INPUT_PATH"]
output_path=config["general_path"]["OUTPUT_PATH"]

samples = read_table(config["samples"]["SAMPLES_TAB_FILE"])
sample_ids = samples.iloc[:,0]

biosamples = read_table(config["samples"]["SAMPLES_TAB_FILE"])
biosample_ids = biosamples.iloc[:,1]

#graph=expand(output_path+"/graph.svg")

#trimming=expand((output_path+"/{sample}/{sample}.R1.fastq.gz", output_path+"/{sample}/{sample}.R2.fastq.gz"), sample=sample_ids)

qc=expand((output_path+"/{sample}/{sample}.{group}_fastqc.zip", output_path+"/{sample}/{sample}.{group}_fastqc.html"), sample=sample_ids, group=config["group"])

if config["aligment"]["TOOL"] == "TOPHAT2":

    tophat2_align=expand((output_path+"/{sample}/{sample}.mapped.bam", output_path+"/{sample}/{sample}.unmapped.bam", output_path+"/{sample}/{sample}.deletions.bed", output_path+"/{sample}/{sample}.insertions.bed", output_path+"/{sample}/{sample}.junctions.bed"), sample=sample_ids)

if config["aligment"]["TOOL"] == "STAR":
    star_indexes=expand(("{annotation_path}/chrLength.txt", "{annotation_path}/chrName.txt", "{annotation_path}/chrStart.txt", "{annotation_path}/Genome", "{annotation_path}/genomeParameters.txt", "{annotation_path}/SA", "{annotation_path}/SAindex"), annotation_path=config["star"]["GENOME_DIR"])

    star_align=expand((output_path+"/{sample}/{sample}.bam", output_path+"/{sample}/{sample}_ReadsPerGene.out.tab", output_path+"/{sample}/{sample}_SJ.out.tab"), sample=sample_ids)
#    bam_file=expand(output_path+"/{sample}/{sample}.tmp.bam", sample=sample_ids)
    sort_bam_file=expand(output_path+"/{sample}/{sample}.mapped.bam", sample=sample_ids)

#sam_file=expand(output_path+"/{sample}/{sample}.sam", sample=sample_ids)
markdup=expand((output_path+"/{sample}/{sample}.duplicates.bam", output_path+"/{sample}/{sample}.metrics"), sample=sample_ids)
htseq=expand(output_path+"/{sample}/{sample}-{biosample}.htseq", zip, sample=sample_ids, biosample=biosample_ids)
cuffquant=expand(output_path+"/{sample}/{sample}-{biosample}.abundances.cxb", zip, sample=sample_ids, biosample=biosample_ids)
cuffnorm=expand((output_path+"/{sample}/{sample}-{biosample}.genes.fpkm_table", output_path+"/{sample}/{sample}-{biosample}.isoforms.fpkm_table"), zip, sample=sample_ids, biosample=biosample_ids)

index=expand(output_path+"/{sample}/{sample}.bam.bai", sample=sample_ids)

flagstat=expand(output_path+"/{sample}/{sample}.stats.txt", sample=sample_ids)

coverage=expand(output_path+"/{sample}/{sample}_coverage.txt", sample=sample_ids)

reformat_coverage=expand(output_path+"/{sample}/{sample}.coverage.stats.txt", sample=sample_ids)

curie_report=expand(output_path+"/{sample}/{sample}-{biosample}-NGS-RunReport.pdf", zip, sample=sample_ids, biosample=biosample_ids)

#report=expand(output_path+"/report.html")

rule all:
    input:
        star_indexes,
#        trimming,
#        qc,
#        tophat2_align,
#        tophat2_align_and_markdup,
#        star_align,
#        bam_file,
#        markdup,
#        merge,
#        sam_file,
#        htseq,
#        index,
#        flagstat,
#        coverage,
#        reformat_coverage,
#        curie_report,
#        graph,
#        report
#        markdup,
#        cuffquant,
#        cuffnorm,
#        config["general_path"]["OUTPUT_PATH"]+"/report.html"
    params:
        cluster="-q batch -N snakemake_rna_pipeline -l nodes=1:ppn=1,mem=1Gb",
        input_path=config["general_path"]["INPUT_PATH"]
    shell: 
        "rm -f {params.input_path}/snakemake_*"


rule report:
    input:
        reportTable=curie_report,
#        graph=graph
        countTable=htseq
    output: 
        html=config["general_path"]["OUTPUT_PATH"]+"/report.html"
    params:
        cluster="-q batch -N snakemake_report_rna_pipeline -l nodes=1:ppn=1,mem=1Gb"
    run:
#        Pipeline graph: graph_

        samples=len(config["samples"])

        report("""
        ================================
        An example RNA analysis workflow
        ================================

        Number of sample(s): {samples}
       
        One report is available for each sample (see reportTable_ table). 

        HTSeq files (see countTable_ table).

        """, output.html, metadata="Jocelyn Brayet (jocelyn.brayet@curie.fr)", **input)

